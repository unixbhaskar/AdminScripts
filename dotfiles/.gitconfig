[user]
	email = "Your mail address"
	name = "Your Real Name"
	signingkey = "your GPG key here"
[push]
	default = matching
[commit]
[gpg]
	program = gpg2
[commit]
	gpgsign = true
[core]
	editor = vim
        abbrev = 12
	commitGraph = true
[color]
	ui = true

[pretty]
	fixes = Fixes: %h (\"%s\")
[log]
	showSignature = true
[alias]
	unwantedcommit = "!f() { echo "Need to pass the exact commit hash or HEAD~num_of_commit ${1}";}; f"

	logline = log  --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

        gitlog = log --all --graph --pretty=format:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
        st = status -sb  # You have to run this command inside your git repo dir i.e git st
	notifyheader = "--add-header="X-Patchwork-Bot: notify"" #add email notify header to get reply from lkml when patch applied
	tags = tag -l    #You have to run this command inside your git repo dir i.e git tags
	sane = "!git reset --hard origin/master" # Discard the local commits and sync with remote master
	curtag = "!git describe --abbrev=0"  # You have to run this command inside the git repo i.e git curtag
	ci = "!git commit -s -m"  # You have to run this command inside the git repo dir i.e git ci "write the msg"
	tagsfromallbranches = "!git describe --tags $(git rev-list --tags --max-count=1)" # same as above i.e git tagsfromallbranches
	branches = branch -av  # You need to run this inside your git repo dir i.e git branches
	repoclean = "!git clean -d -f -x"  # You need to run this inside your git repo dir i.e git repoclean
	remotes = remote -v   # You need to run this command inside the git repo dir i.e git remotes
	delfiles = "!git ls-files --deleted | xargs git rm"  # You need to run this command inside the git repo dir i.e git delfiles
        sdiff = "!git diff && git submodule foreach 'git diff'"	 # You need to run this command inside the git repo dir i.e git sdiff
	spush = "!git push --recurse-submodules=on-demand"   # You need to run this command inside your git repo dir i.e git spush
	supdate = "!git submodule update --remote --merge"  #You need to run this command inside your git repo dir i.e git supdate
	localcommit = "!git cherry -v"
	updatelinux = "!git push https://username:password@github.com/githubusername/linux.git master"
        gitlablinux = "!git push https://username:password@gitlab.com/gitlabusername/linux.git master"
	updategit = "!git push https://username:password@github.com/githubusername/git.git master"
	muttupdate = "!git push https://username:password@gitlab.com/gitlabusername/mutt.git master"
        updatei3 = "!git push https://username:password@github.com/githubusername/i3.git next"
        updatebcc = "!git push https://username:password@github.com/githubusername/bcc.git master"
	pushlatestlinuxtag = "!git push https://username:password@github.com/githubusername/linux.git --tags"
        pushlatestgittag = "!git push https://username:password@github.com/githubusername/git.git --tags"
	logref = "!git reflog --date=iso"  # You need to run this command inside of your git repo i.e git logref
# Show the diff between the latest commit and the current state ; run it
# inside your git repo dir
        currentstate = "!git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
#show aliases
      aliases = config --get-regexp alias #You need to run this command inside your git repo dir
#interactive rebase
     reb = "!r() { git rebase -i HEAD~$1; }; r" #You need to run this command inside your git repo dir
# List contributors with number of commits
     contributors = shortlog --summary --numbered #You need to run this command inside your git repo dir
# remove bunch of files at once
     remove = rm $(git ls-files -d)          #You need to run this command inside your git repo dir
#Gobal pull request fetcher
#git config --global --add remote.origin.fetch "+refs/pull/*/head:refs/remotes/origin/pr/*"

#Ignore files track
      gitignore = state --ignored --untracked-files=all  #You need to run this command inside your git repo dir
#hide,unhide and hidden
#
    hide   = update-index --skip-worktree  #You need to run this command inside your git repo dir
    unhide = update-index --no-skip-worktree  #You need to run this command inside your git repo dir
    hidden  = "!git ls-files -v | grep ^[hsS] | cut -c 3-" #You need to run this command inside your git repo dir
#Freeze and unfreeze files
#
freeze = update-index --assume-unchanged  #You need to run this command inside your git repo dir
unfreeze = update-index --no-assume-unchanged  #You need to run this command inside your git repo dir
	type = cat-file -t  #You need to run this command inside your git repo dir
	dump = cat-file -p  #You need to run this command inside your git repo dir
	hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short  #You need to run this command inside your git repo dir

[sendemail]
; setup for using git send-email; prompts for password
         smtpuser = "your email here"
         smtpserver = smtp.yourmailprovider.com
         smtpencryption = tls
         smtpserverport = 587
	 smtppass = "your smtp password"
	 confirm = auto
	 chainreplyto = false


[github]
	user = unixbhaskar
	token = "Your GitHub token here"
[rerere]
	enabled = true
[gc]
	writeCommitGraph = true
[merge]
	tool = vimdiff
[diff]
	external = git_diff_wrapper  # call it inside the git repo; git diff
[pull]
	rebase = false
[init]
	defaultBranch = master
#[credential]
#	helper = store  #try to avoid this, because if you enable it ,this
#	process will record/write your password in project's .git/index file cleartext.
